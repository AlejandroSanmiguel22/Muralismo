<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>Documento sin título</title>
	<link rel="stylesheet" href="style.css">
<script src="script.js" defer> </script>
</head>

<body>
	
	  <!-- ZONA DE LA CAJA DE DIBUJO ------------------------------------------------------------------------ -->
    <div class="tablero-container">
        <h1>Tablero de Dibujo</h1>
        <canvas id="canvas" width="500" height="400"></canvas>
    </div>
        <!-- ZONA DE LOS BOTONES DE BORRAR Y COLORES ------------------------------------------------------------------------ -->
        <div class="controles">
    <button class="botonesdibujo" id="borrar">Borrar lienzo</button>
    <input class="botonesdibujo" type="color" id="colorSelector" value="#000000"> <!-- Selector de colores -->
</div>
	
</body>
</html>


// JavaScript Document
// ZONA DE LA CAJA DE DIBUJO ------------------------------------------------------------------------------------------------------------

// Selecciona el área de dibujo (canvas) y activa el contexto para dibujar
let canvas = document.getElementById("canvas");
let ctx = canvas.getContext("2d");

// Selecciona los botones de borrar y el selector de color
let borrarBtn = document.getElementById("borrar");
let colorSelector = document.getElementById("colorSelector");

// Variable que detecta si el usuario está dibujando
let isDrawing = false;

// Variable para guardar el color actual del trazo
let colorActual = colorSelector.value; // Se obtiene el color inicial del selector

// Evento que cambia el color del trazo cuando el usuario selecciona uno nuevo
colorSelector.addEventListener("input", () => {
    colorActual = colorSelector.value; // Se actualiza la variable con el nuevo color seleccionado
});

// Evento que se activa cuando el usuario presiona el mouse dentro del área de dibujo
canvas.addEventListener("mousedown", () => {
    isDrawing = true; // Activa el modo de dibujo
    ctx.strokeStyle = colorActual; // Aplica el color actual al trazo
});

// Evento que detecta cuando el usuario suelta el mouse y detiene el dibujo
canvas.addEventListener("mouseup", () => {
    isDrawing = false; // Desactiva el modo de dibujo
    ctx.beginPath(); // Reinicia el trazo para evitar líneas no deseadas
});

// Evento que permite dibujar cuando el usuario mueve el mouse dentro del área de dibujo
canvas.addEventListener("mousemove", (event) => {
    if (!isDrawing) return; // Si no se está presionando el mouse, no se dibuja

    // Obtiene la posición correcta dentro del canvas, corrigiendo desplazamientos por zoom
    let rect = canvas.getBoundingClientRect();
    let x = event.clientX - rect.left;
    let y = event.clientY - rect.top;

    // Configuración del trazo
    ctx.lineWidth = 3; // Define el grosor de la línea
    ctx.lineCap = "round"; // Usa bordes redondeados para un trazo más suave

    // Dibuja en la posición correcta dentro del área de dibujo
    ctx.lineTo(x, y); // Mueve el trazo hasta la nueva posición
    ctx.stroke(); // Dibuja la línea

    ctx.beginPath(); // Reinicia el trazado
    ctx.moveTo(x, y); // Mueve el punto de inicio del siguiente trazo
});

// Evento para borrar todo el contenido del lienzo cuando el usuario presiona el botón de borrar
borrarBtn.addEventListener("click", () => {
    ctx.clearRect(0, 0, canvas.width, canvas.height); // Limpia completamente el área de dibujo
});

@charset "utf-8";
/* CSS Document */

/* Área de dibujo */
#canvas {
    border: 2px solid black; /* Borde para visualizar el área */
    cursor: crosshair; /* Cursor adecuado para dibujar */
    background-color: white; /* Fondo blanco para mejor contraste */
}
 
/* Contenedor de los controles */
.controles {
    margin-top: 10px;
display: flex;
justify-content: center;
/align-items: center; opcional/
 
}
 
/* Botón de borrar */
#borrar {
    padding: 5px 10px;
    font-size: 16px;
}
 
.botonesdibujo {
margin: 5px; /* esta clase esta en ambos botones a pesar de que una de ellas ya tiene un id, pero esto es para poner espacioado entre ambos botones con margin */
 
 
}